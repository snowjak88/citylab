apply plugin: 'application'

sourceSets.main.resources.srcDirs += [ rootProject.file('assets').path ]
mainClassName = 'org.snowjak.city.lwjgl3.Lwjgl3Launcher'
eclipse.project.name = appName + '-lwjgl3'
sourceCompatibility = 8.0

dependencies {
	implementation project(':core')
	implementation "com.badlogicgames.gdx:gdx-backend-lwjgl3:$gdxVersion"
	implementation "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-desktop"
	implementation "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-desktop"
	implementation "com.github.czyzby:gdx-autumn-fcs:$autumnVersion"
}

import org.gradle.internal.os.OperatingSystem

run {
	workingDir = rootProject.file('assets').path
	setIgnoreExitValue(true)
	
	if (OperatingSystem.current() == OperatingSystem.MAC_OS) {
		// Required to run LWJGL3 Java apps on MacOS
		jvmArgs += "-XstartOnFirstThread"
	}
}

jar {
	archiveBaseName = appName
	dependsOn configurations.runtimeClasspath
	from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
	duplicatesStrategy = 'WARN' 
	manifest {
		attributes 'Main-Class': project.mainClassName
	}
	excludes [ "assets/data/" ]
	doLast {
		file(archivePath).setExecutable(true, false)
	}
}

//
// Fix for over-long CLASSPATH environment-variable in Windows start-script
//
task pathingJar(type: Jar) {
	archiveAppendix = 'pathing'
	manifest { attributes("Class-Path": configurations.runtimeClasspath.collect { it.getName() }.join(' ') + ' ' + jar.archiveName ) }
}

startScripts {
	doLast {
		def winScriptFile  = file getWindowsScript()
		def winFileText = winScriptFile.text

		// Remove too-long-classpath and use pathing jar instead
		winFileText = winFileText.replaceAll('set CLASSPATH=.*', 'rem CLASSPATH declaration removed.')
		winFileText = winFileText.replaceAll('("%JAVA_EXE%" .* -classpath ")%CLASSPATH%(" .*)', '$1%APP_HOME%\\\\lib\\\\' + pathingJar.archiveName + '$2')

		winScriptFile.text = winFileText
	}
}

distributions {
	main {
		distributionBaseName = appName
		contents {
			from (rootProject.file('assets/data/')) {
				into 'data'
			}
			from(pathingJar) { into "lib" }
		}
	}
}